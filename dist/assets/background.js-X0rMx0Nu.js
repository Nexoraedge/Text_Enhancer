var l={};function d(n,t,e=null){return e?`${e.trim()}

Text:
"${n.trim()}"

Only return the improved version. Do not explain, justify, or provide multiple options.`:`${{email:"Make this suitable for an email. Be clear, concise, and polite.",social:"Optimize this for social media. Make it engaging, casual, and easy to read.",professional:"Make this sound professional, polished, and confident.",academic:"Refine this for academic tone. Use formal language and structure.",romantic:"Make this sound warm, thoughtful, and emotionally expressive.",general:"Enhance the clarity, grammar, and tone. Make it clean and professional."}[t]||"Improve clarity, tone, grammar, and flow."}

Text:
"${n.trim()}"

Only return the final improved version. Do not include any introductions, explanations, options, or formatting. Maintain similar length and tone unless clearly needed.`}async function p(n,{contextType:t="general",customPrompt:e=null,includeEmojis:r=!1}){try{const o=d(n,t,e),u={temperature:r?.8:.7,topK:40,topP:.95,maxOutputTokens:1024};try{const c=typeof process<"u"&&l&&l.NEXT_PUBLIC_API_BASE_URL?l.NEXT_PUBLIC_API_BASE_URL:typeof window<"u"&&window.NEXT_PUBLIC_API_BASE_URL?window.NEXT_PUBLIC_API_BASE_URL:"http://localhost:3000";let a;try{a=await fetch(`${c}/api/enhance`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:n,options:{prompt:o,generationConfig:u}})})}catch{throw new Error("Could not connect to backend server. Please make sure the server is running.")}if(!a.ok)throw new Error(`Failed to enhance text: ${a.statusText}`);const s=await a.json();if(s.success){let i=s.enhancedText;return i=m(i,r),i}else throw new Error(s.error||"Enhancement failed")}catch(c){throw c}}catch(o){throw console.error("Error in enhanceTextWithGemini:",o),o}}function m(n,t=!1){let e=n;return e=e.replace(/^(Okay|Sure|Here|Alright|I've|I'll|I'd|I have|I will|I would|Let me|Here's|Here are|Certainly|Absolutely|Of course|Definitely)\b[^\n]*\n+/i,""),e=e.replace(/^\s*Enhanced Text:\s*/i,""),e=e.replace(/\*\*([^*]+)\*\*/g,"$1"),e=e.replace(/\*([^*]+)\*/g,"$1"),e=e.replace(/^\s*[-*+]\s+/gm,""),e=e.replace(/^\s*\d+\.\s+/gm,""),e=e.replace(/^["']|["']$/g,""),t||(e=e.replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F700}-\u{1F77F}]|[\u{1F780}-\u{1F7FF}]|[\u{1F800}-\u{1F8FF}]|[\u{1F900}-\u{1F9FF}]|[\u{1FA00}-\u{1FA6F}]|[\u{1FA70}-\u{1FAFF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu,"")),e.trim()}chrome.commands.onCommand.addListener(n=>{const t={"quick-enhance":{action:"enhance-text"},"custom-prompt":{action:"show-custom-prompt"},"context-generator":{action:"show-context-enhancer"}};t[n]?chrome.tabs.query({active:!0,currentWindow:!0},async e=>{if(e[0])try{await f(e[0].id),chrome.tabs.sendMessage(e[0].id,t[n],r=>{chrome.runtime.lastError&&(console.error("Error sending message:",chrome.runtime.lastError.message),h(e[0].id,t[n]))})}catch(r){console.error(`Error in ${n} command:`,r)}}):console.warn("Unrecognized keyboard shortcut command:",n)});async function f(n){try{await chrome.tabs.sendMessage(n,{action:"ping"})}catch{console.log("Content script not loaded, injecting..."),await h(n)}}async function h(n,t=null){try{await chrome.scripting.executeScript({target:{tabId:n},files:["content.js"]}),t&&setTimeout(()=>{chrome.tabs.sendMessage(n,t,e=>{chrome.runtime.lastError&&console.error("Error sending message after injection:",chrome.runtime.lastError.message)})},500)}catch(e){console.error("Error injecting content script:",e)}}chrome.runtime.onMessage.addListener((n,t,e)=>{if(n.action==="enhance-text-with-gemini"||n.action==="enhanceTextFromPopup"||n.action==="enhance-text"||n.action==="custom-prompt"||n.action==="context-enhancer")return(async()=>{try{const r=await p(n.text,{contextType:n.contextType||n.context||"general",customPrompt:n.customPrompt,includeEmojis:n.includeEmojis||!1});e({success:!0,enhancedText:r})}catch(r){console.error("Error enhancing text:",r),e({success:!1,error:r.message})}})(),!0});
